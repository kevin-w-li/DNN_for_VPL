#name: "AlexNet"
# ===========
# Data Laters
# ==========
layer {
  name: "data"
  type: "Data"
  top: "data_pair"
  top: "label"
  include {phase:TRAIN}
  data_param {
	source: ""
	backend: LMDB
	batch_size: 0
  }
  transform_param {
    mean_value: 125
  }
}

layer {
  name: "data"
  type: "Data"
  top: "data_pair"
  top: "label"
  include {phase:TEST
           stage:"test"
  }
  data_param {
	source: ""
	backend: LMDB
	batch_size: 0
  }
 transform_param {
  mean_value: 125
  }
}

layer {
  name: "data"
  type: "MemoryData"
  top: "data_pair"
  top: "label"
  memory_data_param {
  batch_size: 1
  channels: 2
  height: 227
  width: 227
  }
  include: {stage:"test_2"}
}

layer {
  name: "data"
  type: "Input"
  top: "noisy_data_pair"
  input_param {
    # initial shape for a fully convolutional network:
    # the shape can be set for each input by reshape.
    shape: { dim: 1 dim: 2 dim: 227 dim: 227 }
  }
  include: {stage:"inspect"}
}

layer{
  name: "data"
  type: "DummyData"
  top: "data_pair"
  top: "label"
  dummy_data_param{
    shape: {dim: 1 dim:2 dim:227 dim: 227}
  }
  include:{not_stage: "inspect", not_stage: "test", not_stage:"test_2", not_stage:"train"}
}

# add noise
layer{
  name: "input_noise"
  type: "DummyData"
  top: "noise_pair"
  dummy_data_param{
    shape: {dim: 1 dim:2 dim:227 dim: 227}
    data_filler{
      type : "gaussian"
      std : 0.00001
    }
  }
  include: {not_stage:"inspect"}
}

layer {
  name: "ctrst"
  type: "Scale"
  bottom: "data_pair"
  top: "data_pair"
  scale_param {
    num_axes: 0
    filler{
        type: "constant"
        value: 1.0
    }
  }
  include: {not_stage:"inspect"}
  param {lr_mult: 0 decay_mult: 0 }

}

layer{
  name: "add_noise"
  type: "Eltwise"
  bottom: "noise_pair"
  bottom: "data_pair"
  top: "noisy_data_pair"
  eltwise_param{
    operation : 1
  }
  include: {not_stage:"inspect"}
}

layer {
  name: "slice_pair"
  type: "Slice"
  bottom: "noisy_data_pair"
  top: "data"
  top: "ref"
  slice_param {
    slice_dim: 1
    slice_point: 1
  }
}

# ===========
# Convolution Layers
# ==========

# Conv1
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
  }
  param {
    name:"conv1_w"
    lr_mult: 0 
    decay_mult: 0 
  }
  param { 
    name:"conv1_b"
    lr_mult: 0 
    decay_mult: 0 
  }
}

layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}

layer {
  name: "norm1"
  type: "LRN"
  bottom: "conv1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}

layer {
  name: "pool1"
  type: "Pooling"
  bottom: "norm1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}

# Conv1_p
layer {
  name: "conv1_p"
  type: "Convolution"
  bottom: "ref"
  top: "conv1_p"
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
  }
  param {
    name:"conv1_w"
    lr_mult: 0 
    decay_mult: 0 }
  param { 
    name:"conv1_b"
    lr_mult: 0 
    decay_mult: 0 }
}

layer {
  name: "relu1_p"
  type: "ReLU"
  bottom: "conv1_p"
  top: "conv1_p"
}

layer {
  name: "norm1_p"
  type: "LRN"
  bottom: "conv1_p"
  top: "norm1_p"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}

layer {
  name: "pool1_p"
  type: "Pooling"
  bottom: "norm1_p"
  top: "pool1_p"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}

# Conv2
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
  }
  param {
    name: "conv2_w"
    lr_mult: 0 
    decay_mult: 0 
  }
  param { 
    name: "conv2_b"
    lr_mult: 0 
    decay_mult: 0 
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "conv2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "norm2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
# Conv2_p
layer {
  name: "conv2_p"
  type: "Convolution"
  bottom: "pool1_p"
  top: "conv2_p"
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
  }
  param {
    name: "conv2_w"
    lr_mult: 0 
    decay_mult: 0 
  }
  param { 
    name: "conv2_b"
    lr_mult: 0 
    decay_mult: 0 
  }
}
layer {
  name: "relu2_p"
  type: "ReLU"
  bottom: "conv2_p"
  top: "conv2_p"
}
layer {
  name: "norm2_p"
  type: "LRN"
  bottom: "conv2_p"
  top: "norm2_p"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "pool2_p"
  type: "Pooling"
  bottom: "norm2_p"
  top: "pool2_p"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}

# Conv3
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
  }
  param {
    name: "conv3_w"
    lr_mult: 0 
    decay_mult: 0 }
  param {
    name: "conv3_b"
    lr_mult: 0 
    decay_mult: 0 }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
# Conv3_p
layer {
  name: "conv3_p"
  type: "Convolution"
  bottom: "pool2_p"
  top: "conv3_p"
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
  }
  param {
    name: "conv3_w"
    lr_mult: 0 
    decay_mult: 0 }
  param {
    name: "conv3_b"
    lr_mult: 0 
    decay_mult: 0 }
}
layer {
  name: "relu3_p"
  type: "ReLU"
  bottom: "conv3_p"
  top: "conv3_p"
}

# Conv4
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
  }
  param {name: "conv4_w"  lr_mult: 0 decay_mult: 0 }
  param {name: "conv4_b"  lr_mult: 0 decay_mult: 0 }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}

# Conv4_p
layer {
  name: "conv4_p"
  type: "Convolution"
  bottom: "conv3_p"
  top: "conv4_p"
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
  }
  param {name: "conv4_w"  lr_mult: 0 decay_mult: 0 }
  param {name: "conv4_b"  lr_mult: 0 decay_mult: 0 }
}
layer {
  name: "relu4_p"
  type: "ReLU"
  bottom: "conv4_p"
  top: "conv4_p"
}

# Conv5
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
  }
  param {name:"conv5_w"  lr_mult: 0 decay_mult: 0 }
  param {name:"conv5_b"  lr_mult: 0 decay_mult: 0 }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
# Conv5_p
layer {
  name: "conv5_p"
  type: "Convolution"
  bottom: "conv4_p"
  top: "conv5_p"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
  }
  param {name:"conv5_w"  lr_mult: 0 decay_mult: 0 }
  param {name:"conv5_b"  lr_mult: 0 decay_mult: 0 }
}
layer {
  name: "relu5_p"
  type: "ReLU"
  bottom: "conv5_p"
  top: "conv5_p"
}
layer {
  name: "pool5_p"
  type: "Pooling"
  bottom: "conv5_p"
  top: "pool5_p"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}


# ====================
# InnerProduct layers
# ====================
#


layer {
  name: "vpl"
  type: "InnerProduct"
  bottom: "pool5"
  top: "vpl"
  inner_product_param {
    num_output: 1
    weight_filler{
        type: "constant"
        std: 0.001
    }
    bias_filler{type:"constant" value: 0.0}
  }
  param {name: "vpl_w" lr_mult: 0 decay_mult: 0 }
  param {name: "vpl_b" lr_mult: 0 decay_mult: 0 }
}

layer {
  name: "vpl_p"
  type: "InnerProduct"
  bottom: "pool5_p"
  top: "vpl_p"
  inner_product_param {
    num_output: 1
  }
  param {name: "vpl_w" lr_mult: 0 decay_mult: 0 }
  param {name: "vpl_b" lr_mult: 0 decay_mult: 0 }
}

layer {
  name: "neg"
  type: "Scale"
  bottom: "vpl_p"
  top: "vpl_p"
  scale_param {
    num_axes: 0
    filler{
        type: "constant"
        value: -1.0
    }
  }
  param {lr_mult: 0 decay_mult: 0 }
}
# Concatenate
layer{
  name:"vpl2"
  type: "Concat"
  bottom:"vpl"
  bottom:"vpl_p"
  top:"vpl2"
  concat_param{axis:1}
}


layer {
  name: "comb"
  type: "InnerProduct"
  bottom: "vpl2"
  top: "vpl_out"
  inner_product_param {
    num_output: 1
    weight_filler{
        type: "constant"
        value: 1.0
    }
    bias_filler{type:"constant" value: 0}
  }
  param {lr_mult: 0 decay_mult: 0 }
  param {lr_mult: 0 decay_mult: 0 }
}

layer {
  name: "neg_2"
  type: "InnerProduct"
  bottom: "vpl_out"
  top: "vpl_out_neg"
  inner_product_param {
    num_output: 1
    weight_filler{
        type: "constant"
        value: -1.0
    }
  }
  param {lr_mult: 0 decay_mult: 0 }
  param {lr_mult: 0 decay_mult: 0 }
}

layer{
  name:"vpl2"
  type: "Concat"
  bottom:"vpl_out_neg"
  bottom:"vpl_out"
  top:"fc8"
  concat_param{axis:1}
}


layer {
  name: "logistic"
  type: "Scale"
  bottom: "fc8"
  top: "fc8"
  scale_param {
    num_axes: 0
    filler{
        type: "constant"
        value: 0.5
    }
  }
  param {lr_mult: 0 decay_mult: 0 }
}

layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc8"
  bottom: "label"
  top: "loss"
  include: {not_stage: "inspect"}
}

layer {
    name:"accuracy"
    type:"Accuracy"
    bottom: "fc8"
    bottom: "label"
    top: "acc"
    include: {not_stage: "inspect"}    
}

layer{
    name:"prob"
    type:"Softmax"
    bottom: "fc8"
    top: "prob" 
}
layer{
    name: "silence"
    type: "Silence"
    bottom: "prob"
}
